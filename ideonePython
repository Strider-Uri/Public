""" String work """

first_name = raw_input("Enter your first name.") 

print "Welcome, %s. This is an ideone program." %(first_name)

name = raw_input("What is your name?")
quest = raw_input("What is your quest?")
color = raw_input("What is your favorite color?")

print "Ah, so your name is %s, your quest is %s, " \
"and your favorite color is %s." % (name, quest, color)

my_string = "This is totally my string."
print len(my_string)
print my_string.upper()
print my_string.lower()
print my_string[0].upper() + my_string[1::]

""" Date and time """

from datetime import datetime
now = datetime.now()

print '%s/%s/%s' % (now.month, now.day, now.year)
print '%s:%s:%s' % (now.hour, now.minute, now.second)

""" Control Flow """

def choice():
    print "You've got choices!"
    answer = raw_input("Type left or right").lower()
    if answer == "left" or answer == "l":
        print "Verbal Abuse Room!"
    elif answer == "right" or answer == "r":
        print "Argument Room"
    else:
        print "didn't pick"
        choice()

choice()

"""
     Boolean Operators
------------------------      
True and True is True
True and False is False
False and True is False
False and False is False

True or True is True
True or False is True
False or True is True
False or False is False

Not True is False
Not False is True

Boolean operators aren't just evaluated from left to right. 
Just like with arithmetic operators, 
there's an order of operations for boolean operators:

not is evaluated first;
and is evaluated next;
or is evaluated last.

"""

# checking for a value
def greater_less_equal_5(answer):
    if answer>5:
        return 1
    elif answer<5:          
        return -1
    else:
        return 0
        
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)

# if and elif: always return on conditional function?
def the_flying_circus():
    if animals>20:
        print "There is a full gallery of animals."
        return True
    elif animals<=20 and animals>0:
        print "We should get more animals."
        return False
    else:
        print "There aren't enough animals for the show."
        # Start coding here!
        # Don't forget to indent
        # the code inside this block!
animals=29
the_flying_circus()

""" pig latin """

yg = 'ay'
original = raw_input('Enter a word:')
word=original.lower()
first=word[0]
new_word=word[1:len(word)]+first+pyg
print original + " is pronounced " + new_word

""" functions """

def tax(bill):
    """Adds 8% tax to a restaurant bill."""
    bill *= 1.08
    print "With tax: %f" % bill
    return bill

def tip(bill):
    """Adds 15% tip to a restaurant bill."""
    bill *= 1.15
    print "With tip: %f" % bill
    return bill
    
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)

""" square function """
""" demonstrates variable placeholders """

def square(n):
    """Returns the square of a number."""
    squared = n**2
    print "%d squared is %d." % (n, squared)
    return squared

square(10)

""" caps listener """

def shout(phrase):
    if phrase == phrase.upper():
        return "YOU'RE SHOUTING!"
    else:
        return "Can you speak up?"

shout("I'M INTERESTED IN SHOUTING")

""" module printer """

import turtle
everything = dir(turtle)
for x in range(1,75,1):
    print str(x) + ": " + str(everything[x])     

""" trip advisor """

def hotel_cost(nights):
    return 140*nights
    
def plane_ride_cost(city):
    if city.lower()=="charlotte":
        return 183
    elif city.lower()=="tampa":
        return 220
    elif city.lower()=="pittsburgh":
        return 222
    elif city.lower()=="los angeles":
        return 475
    else:
        return "Enter a valid city."
    
def rental_car_cost(days):
    if days<=0:
        return 0
    elif days<3 and days>0:
        return days*40
    elif days>=3 and days<7:
        return (days*40)-20
    elif days>=7:
        return (days*40)-50
    else:
        return "Woops! Invalid entry."
    
def trip_cost(city, days, spending_money):
    return rental_car_cost(days)+hotel_cost(days)+plane_ride_cost(city)+spending_money
    
print trip_cost("Los angeles", 5, 600)

""" Dictionaries """

menu = {} # Empty dictionary
menu['Chicken Alfredo'] = 14.50 # Adding new key-value pair
print menu['Chicken Alfredo']

# Your code here: Add some dish-price pairs to menu!
menu['Rotisserie'] = 12.00
menu['Soda-Pop'] = 1.50
menu['Paper plate'] = .15
menu['New Item'] = .50


print "There are " + str(len(menu)) + " items on the menu."
print menu

inventory = {
    'gold' : 500,
    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']
inventory['pocket']=['seashell', 'strange berry', 'lint']
# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 
inventory['backpack'].sort()

answer=raw_input("Would you like to sell your dagger?")
if answer.lower() == "yes" or answer.lower() == "y":
	inventory['backpack'].remove('dagger')
	inventory['gold']+=50
elif answer.lower() == "no" or answer.lower() == "n":
	menu=raw_input("1: Buy \n 2: Sell \n 3: Exit")
    dagger_method(dagger_level_1)
else:
    print "Pardon?"

print inventory


